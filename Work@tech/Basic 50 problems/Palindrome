Palindrome

A palindrome is a word that reads the same backward as forward, e.g., madam. If you start comparing the letters from the beginning with the corresponding letters from the end, they would be the same.

Given a set of words, you have to find if they are palindrome or not.

Input Format
First line contains an integer T denoting the number of words to check.

Next T lines contain a word each without any special characters.

Output Format
T lines, each denoting if the corresponding word is a palindrome.

"True" if the word is a palindrome and "False" if it is not.

Examples

Sample Input
2
refer
roar

Expected Output
True
False

Constraints
0 < T <= 100
0 < length of word <= 10000

------------------------------------------------------------------------------------
import java.util.Scanner;

class WorkAtTech {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        int T = input.nextInt();
        input.nextLine(); // consume newline after integer input

        for (int i = 0; i < T; i++) {
            String name = input.nextLine();
            String reverse = "";
            
            for (int j = name.length() - 1; j >= 0; j--) {
                reverse += name.charAt(j);
            }
            
            if (name.equals(reverse)) {
                System.out.println("True");
            } else {
                System.out.println("False");
            }
        }
    }
}
------------------------------------------------------------------------------------
Explanation 
1. Added input.nextLine(); after nextInt(); to consume the leftover newline.
   ðŸ”¹ When you use Scanner.nextInt(), it only reads the integer value but leaves the newline character (\n) in the input buffer.
    If you then call nextLine() right after nextInt(), it will consume the leftover newline instead of waiting for actual user input.
   ðŸ”¹ Always add input.nextLine(); after nextInt(), nextDouble(), etc. if you're planning to use nextLine() afterward.
    This ensures that nextLine() doesn't just consume the leftover newline from the previous input operation.
   ðŸ”¹ Key Takeaway: If you mix nextInt() and nextLine(), always clear the input buffer! 

2. Used charAt() instead of str[i] for character comparison.
   ðŸ”¹ Strings in Java do not support direct indexing like arrays.
   ðŸ”¹ Fix: Use str.charAt(i) and str.charAt(end - i).

3. Iterate only till str.length() / 2 to optimize palindrome checking.

4. Used boolean isPalindrome instead of int flag for clarity.

5. Used System.out.println() for consistent output formatting.



OR-----------------------------------------------------------------------------------

//Without reversing

Scanner  input = new Scanner(System.in);
		int T = input.nextInt();
		input.nextLine();
		
		for(int i=0;i<T;i++){
			//logic
			String str =input.nextLine();
			int length =(str.length());
			
			boolean isPalindrom = true;
			for(int j=0; j< length/2; j++ ){
				if(str.charAt(j) != str.charAt(length-j-1)){
					isPalindrom =false ;
					break;
				}
			}
			
			if(isPalindrom){
				System.out.println("True");
			}else{
				System.out.println("False");
				
			}
		}
